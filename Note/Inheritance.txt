Inheritance:-
To create new class using existing class is known as Inheritance.
Newly create class is known as Drived class and class from which it is created is known as base class
Syntax:-
class subclass_name : access_mode base_class_name
{
  // body of subclass
};



Access Mode:-
It is optional if given then it may be private or public.
Private- When base class is privatly inherited then public data member and member function will be inherited as private in drived class.
Public- When base class is publically inherited then public data member and member function will be inherited as public in drived class.

(1)Single Inheritance:-

In single inheritance, a class is allowed to inherit from only one class. i.e. one sub class is inherited by one base class only.
Syntax: 

class subclass_name : access_mode base_class
{
  // body of subclass
};

using namespace std;
 
// base class
class Vehicle {
  public:
    Vehicle()
    {
      cout << "This is a Vehicle\n";
    }
};
 
// sub class derived from a single base classes
class Car : public Vehicle {
 
};
 
// main function
int main()
{  
    // Creating object of sub class will
    // invoke the constructor of base classes
    Car obj;
    return 0;
}

(2)Multiple Inheritance:-
When class is crearted using 2 parent class it is known as Multiple inheritance.
When derived class has more then 1 parent class it is called as Multiple inheritance.
*Syntax:-
 class subclass_name : access_mode base_class1, access_mode base_class2, ....
{
  // body of subclass
};

*Example:-

// C++ program to explain
// multiple inheritance
#include<iostream>
using namespace std;

// first base class
class Vehicle {
public:
	Vehicle()
	{
	cout << "This is a Vehicle\n";
	}
};

// second base class
class FourWheeler {
public:
	FourWheeler()
	{
	cout << "This is a 4 wheeler Vehicle\n";
	}
};

// sub class derived from two base classes
class Car : public Vehicle, public FourWheeler {

};

// main function
int main()
{
	// Creating object of sub class will
	// invoke the constructor of base classes.
	Car obj;
	return 0;
}

(3)Multilevel Inheritance:-
When derived class is created from another derived class it is known as Multilevel inheritance. 
*Example:-
// C++ program to implement
// Multilevel Inheritance
#include<iostream>
using namespace std;

// base class
class Vehicle
{
public:
	Vehicle()
	{
	cout << "This is a Vehicle\n";
	}
};

// first sub_class derived from class vehicle
class fourWheeler: public Vehicle
{ public:
	fourWheeler()
	{
	cout << "Objects with 4 wheels are vehicles\n";
	}
};
// sub class derived from the derived base class fourWheeler
class Car: public fourWheeler {
public:
	Car()
	{
	cout << "Car has 4 Wheels\n";
	}
};

// main function
int main()
{
	// Creating object of sub class will
	// invoke the constructor of base classes.
	Car obj;
	return 0;
}
(4) Hierarchical Inheritance:-
In this type of inheritance, more than one sub class is inherited from a single base class. i.e. more than one derived class is created from a single base class.
// C++ program to implement
// Hierarchical Inheritance
#include<iostream>
using namespace std;

// base class
class Vehicle
{
public:
	Vehicle()
	{
	cout << "This is a Vehicle\n";
	}
};


// first sub class
class Car: public Vehicle
{

};

// second sub class
class Bus: public Vehicle
{
	
};

// main function
int main()
{
	// Creating object of sub class will
	// invoke the constructor of base class.
	Car obj1;
	Bus obj2;
	return 0;
}

(5)Hybrid (Virtual) Inheritance:-
Hybrid Inheritance is implemented by combining more than one type of inheritance.
// C++ program for Hybrid Inheritance

#include<iostream>
using namespace std;

// base class
class Vehicle
{
public:
	Vehicle()
	{
	cout << "This is a Vehicle\n";
	}
};

//base class
class Fare
{
	public:
	Fare()
	{
		cout << "Fare of Vehicle\n";
	}
};

// first sub class
class Car : public Vehicle
{

};

// second sub class
class Bus : public Vehicle, public Fare
{
	
};

// main function
int main()
{
	// Creating object of sub class will
	// invoke the constructor of base class.
	Bus obj2;
	return 0;
}
Virtual Base Class:-
in hybrid inheritance due when we create drived class using 2 parent class which has great class while accessing data member and member function 
of great paretnt class compiler throws ambiguity error 
to solved this error we inherit base class as Virtual base class.
Syntax:-
class subclass_name : Virtual access_mode base_class1
{
  // body of subclass
};

class subclass_name : access_mode  Virtual base_class1
{
  // body of subclass
};
eg:-

class child : Virtual public parents{

};

class child : public Virtual  parents{

};

//virtual Example
#include<iostream>
using namespace std;
class Humnas
{
    public:
    void birth(){
        cout<<"Human has taken birth"<<endl;
    }
};
class Male : public virtual Humnas
{
    public:
    void gender(){
         cout<<"Gender is male"<<endl;
    }
   
};
class feMale : public virtual  Humnas
{
    public:
    void Gender(){
         cout<<"Gender is female"<<endl;
    }
   
};
class student : public virtual Male, public virtual feMale
{
    public:
    void schl(char sname[20]){
        cout<<"Taken admission in "<<sname<<endl;
    }

};
class pro : public virtual Male,public virtual feMale
{
    public:
    void prof(char pname[10]){
        cout<<"Working as a :- "<<pname<<endl;
    }
};
class child: public virtual  Male, public virtual feMale , public virtual student,public virtual pro
{
    public:

};
int main(){
  
    child c1,c2;
    char sname[20]="Disha_School";
    char pname[10]="teacher";
    //c1.schl(sname);
    c2.birth();
    c1.birth();
    c1.gender();
    c1.Gender();
    c1.schl(sname);
    return 0;
}
